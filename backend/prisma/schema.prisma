generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  GUEST
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Уроки, которые ведёт преподаватель
  lessons     Lesson[]     @relation("TeacherLessons")
  // Комнаты, которые он создал
  roomsOwned  Room[]       @relation("OwnerRooms")
  // Членство в комнатах
  memberships RoomMember[]

  messagesAuthored Message[] @relation("UserMessages")

  chatSessionsAsStudent ChatSession[] @relation("ChatSessionStudent")
  chatSessionsAsTeacher ChatSession[] @relation("ChatSessionTeacher")
}

model Lesson {
  id        String   @id @default(uuid())
  title     String
  content   String?
  modelUrl  String?
  teacherId String
  teacher   User     @relation("TeacherLessons", fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id      String  @id @default(uuid())
  code    String  @unique
  title   String?
  ownerId String
  owner   User    @relation("OwnerRooms", fields: [ownerId], references: [id])

  messages     Message[]
  members      RoomMember[]
  chatSessions ChatSession[]

  bgColor    String?   @default("#FFFFFF")
  bgImageUrl String? 
}

model RoomMember {
  id     String @id @default(uuid())
  roomId String
  userId String

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
}

model Message {
  id            String       @id @default(uuid())
  authorId      String?
  text          String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  roomId        String?
  chatSessionId String?

  room        Room?        @relation(fields: [roomId], references: [id])
  chatSession ChatSession? @relation(fields: [chatSessionId], references: [id])
  author      User?        @relation("UserMessages", fields: [authorId], references: [id])
  attachments Attachment[]  
}

model Attachment {
  id        String   @id @default(uuid())
  url       String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String

  createdAt DateTime @default(now())
}

model ChatSession {
  id        String   @id @default(uuid())
  roomId    String
  studentId String
  teacherId String
  createdAt DateTime @default(now())

  room     Room      @relation(fields: [roomId], references: [id])
  student  User      @relation("ChatSessionStudent", fields: [studentId], references: [id])
  teacher  User      @relation("ChatSessionTeacher", fields: [teacherId], references: [id])
  messages Message[]
}
