import * as React from 'react';
import { Button, ButtonProps, CircularProgress, useTheme, Box } from '@mui/material';
import { m } from 'framer-motion';

export type AnimatedSubmitButtonProps = ButtonProps & {
  loading?: boolean;
  /** —Å–µ—Ä—ã–π –≤–∏–¥ –¥–ª—è ¬´–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π¬ª –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ */
  tone?: 'primary' | 'neutral';
  /** —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ ¬´–Ω–∞–∂–∞—Ç–æ–π¬ª –∫–æ–º–Ω–∞—Ç–µ) */
  activeRect?: boolean;
};

const spring = { type: 'spring', stiffness: 520, damping: 28, mass: 0.7 } as const;
const sideSlot = 24;

const AnimatedSubmitButton = React.forwardRef<HTMLButtonElement, AnimatedSubmitButtonProps>(
  ({ loading = false, tone = 'primary', activeRect = false, children, startIcon, sx, ...rest }, ref) => {
    const theme = useTheme();

    // –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    const sizeProp = (rest.size ?? 'large') as 'small' | 'medium' | 'large';
    const btnHeight = sizeProp === 'large' ? 44 : sizeProp === 'medium' ? 40 : 36;

    // —Ü–≤–µ—Ç–∞
    const primaryBg = theme.palette.primary.main;
    const onPrimary = theme.palette.primary.contrastText;
    const neutralBg =
      theme.palette.mode === 'dark'
        ? theme.palette.grey[800]
        : theme.palette.grey[200];
    const onNeutral = theme.palette.text.primary;

    const isRect = loading || activeRect;
    const bgColor = tone === 'primary' ? primaryBg : neutralBg;
    const fgColor = tone === 'primary' ? onPrimary : onNeutral;

    const fullWidth = Boolean(rest.fullWidth);
    const leftNode = loading ? (
      <CircularProgress size={20} sx={{ color: onPrimary }} />
    ) : (
      startIcon ?? null
    );

   return (
  <m.div
    initial={false}
    animate={{
      borderRadius: isRect ? 12 : 999,
      scale: loading ? 0.99 : 1,
      backgroundColor: bgColor,
    }}
    transition={spring}
    style={{
      height: btnHeight,
      width: fullWidth ? '100%' : 'auto',
      alignItems: 'center',
      justifyContent: 'center',
    }}
  >
  <Button
    ref={ref}
    variant="text"
    disableElevation
    fullWidth={fullWidth}
    disabled={rest.disabled || loading}
    sx={{
      minHeight: btnHeight,
      height: btnHeight,
      py: 0,
      px: 0,

      display: 'grid',
      gridTemplateColumns: `${sideSlot}px 1fr ${sideSlot}px`,
      alignItems: 'stretch',
      justifyItems: 'center',

      lineHeight: 'normal',
      padding: 0,
      textTransform: 'none',
      fontWeight: 700,
      color: fgColor,
      bgcolor: 'transparent',
      '&:hover': { bgcolor: 'transparent' },

      // üîë —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π label
      '& .MuiButton-label': {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        width: '100%',
        height: '100%',
        lineHeight: 1,
      },

      ...sx,
    }}
    {...rest}
>
  {/* –ª–µ–≤–∞—è ¬´—è—á–µ–π–∫–∞¬ª */}
  <Box
    sx={{
      width: sideSlot,
      height: '100%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
    }}
  >
    {loading ? <CircularProgress size={20} sx={{ color: onPrimary }} /> : startIcon ?? null}
  </Box>

  {/* —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–ª–æ—Ç */}
  <Box
    sx={{
      width: '100%',
      height: '100%',
      display: 'flex',
      alignItems: 'center',   // üîë —Å—Ç—Ä–æ–≥–æ —Ü–µ–Ω—Ç—Ä
      justifyContent: 'center',
      px: 3,
      lineHeight: 1,          // üîë —Ç–µ–∫—Å—Ç —Ä–æ–≤–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    }}
  >
    {children ?? '–í–æ–π—Ç–∏'}
  </Box>

  {/* –ø—Ä–∞–≤—ã–π —Å–ª–æ—Ç */}
  <Box sx={{ width: sideSlot, height: '100%' }} />
</Button>
      </m.div>
    );
  }
);

AnimatedSubmitButton.displayName = 'AnimatedSubmitButton';
export default AnimatedSubmitButton;
